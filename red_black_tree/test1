			uncle = grandparent->right;

			/* Case 1: Uncle is RED */
			if (uncle && uncle->color == RED)
			{
				grandparent->color = RED;
				parent->color = BLACK;
				uncle->color = BLACK;
				new_node = grandparent;
			}
			else
			{
				/* Case 2: Uncle is BLACK and new_node is the right child */
				if (new_node == parent->right)
				{
					rotate_left(tree, parent);
					new_node = parent;
					parent = new_node->parent;
				}

				/* Case 3: Uncle is BLACK and new_node is the left child */
				rotate_right(tree, grandparent);
				swap_colors(parent, grandparent);
				new_node = parent;
			}


void rotate_left(rb_tree_t **tree, rb_tree_t *parent)
{
	rb_tree_t *right_child = parent->right;

	parent->right = right_child->left;

	if (parent->right)
		parent->right->parent = parent;

	right_child->parent = parent->parent;

	if (!parent->parent)
		*tree = right_child;
	else if (parent == parent->parent->left)
		parent->parent->left = right_child;
	else
		parent->parent->right = right_child;

	right_child->left = parent;
	parent->parent = right_child;
}